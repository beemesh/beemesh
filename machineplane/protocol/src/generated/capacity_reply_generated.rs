// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod beemesh {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod machine {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum CapacityReplyOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CapacityReply<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CapacityReply<'a> {
  type Inner = CapacityReply<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CapacityReply<'a> {
  pub const VT_REQUEST_ID: flatbuffers::VOffsetT = 4;
  pub const VT_OK: flatbuffers::VOffsetT = 6;
  pub const VT_NODE_ID: flatbuffers::VOffsetT = 8;
  pub const VT_REGION: flatbuffers::VOffsetT = 10;
  pub const VT_CAPABILITIES: flatbuffers::VOffsetT = 12;
  pub const VT_CPU_AVAILABLE_MILLI: flatbuffers::VOffsetT = 14;
  pub const VT_MEMORY_AVAILABLE_BYTES: flatbuffers::VOffsetT = 16;
  pub const VT_STORAGE_AVAILABLE_BYTES: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CapacityReply { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CapacityReplyArgs<'args>
  ) -> flatbuffers::WIPOffset<CapacityReply<'bldr>> {
    let mut builder = CapacityReplyBuilder::new(_fbb);
    builder.add_storage_available_bytes(args.storage_available_bytes);
    builder.add_memory_available_bytes(args.memory_available_bytes);
    builder.add_cpu_available_milli(args.cpu_available_milli);
    if let Some(x) = args.capabilities { builder.add_capabilities(x); }
    if let Some(x) = args.region { builder.add_region(x); }
    if let Some(x) = args.node_id { builder.add_node_id(x); }
    if let Some(x) = args.request_id { builder.add_request_id(x); }
    builder.add_ok(args.ok);
    builder.finish()
  }


  #[inline]
  pub fn request_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CapacityReply::VT_REQUEST_ID, None)}
  }
  #[inline]
  pub fn ok(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CapacityReply::VT_OK, Some(false)).unwrap()}
  }
  #[inline]
  pub fn node_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CapacityReply::VT_NODE_ID, None)}
  }
  #[inline]
  pub fn region(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CapacityReply::VT_REGION, None)}
  }
  #[inline]
  pub fn capabilities(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CapacityReply::VT_CAPABILITIES, None)}
  }
  #[inline]
  pub fn cpu_available_milli(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(CapacityReply::VT_CPU_AVAILABLE_MILLI, Some(0)).unwrap()}
  }
  #[inline]
  pub fn memory_available_bytes(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(CapacityReply::VT_MEMORY_AVAILABLE_BYTES, Some(0)).unwrap()}
  }
  #[inline]
  pub fn storage_available_bytes(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(CapacityReply::VT_STORAGE_AVAILABLE_BYTES, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CapacityReply<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("request_id", Self::VT_REQUEST_ID, false)?
     .visit_field::<bool>("ok", Self::VT_OK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("node_id", Self::VT_NODE_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("region", Self::VT_REGION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("capabilities", Self::VT_CAPABILITIES, false)?
     .visit_field::<u32>("cpu_available_milli", Self::VT_CPU_AVAILABLE_MILLI, false)?
     .visit_field::<u64>("memory_available_bytes", Self::VT_MEMORY_AVAILABLE_BYTES, false)?
     .visit_field::<u64>("storage_available_bytes", Self::VT_STORAGE_AVAILABLE_BYTES, false)?
     .finish();
    Ok(())
  }
}
pub struct CapacityReplyArgs<'a> {
    pub request_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ok: bool,
    pub node_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub region: Option<flatbuffers::WIPOffset<&'a str>>,
    pub capabilities: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub cpu_available_milli: u32,
    pub memory_available_bytes: u64,
    pub storage_available_bytes: u64,
}
impl<'a> Default for CapacityReplyArgs<'a> {
  #[inline]
  fn default() -> Self {
    CapacityReplyArgs {
      request_id: None,
      ok: false,
      node_id: None,
      region: None,
      capabilities: None,
      cpu_available_milli: 0,
      memory_available_bytes: 0,
      storage_available_bytes: 0,
    }
  }
}

pub struct CapacityReplyBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CapacityReplyBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_request_id(&mut self, request_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CapacityReply::VT_REQUEST_ID, request_id);
  }
  #[inline]
  pub fn add_ok(&mut self, ok: bool) {
    self.fbb_.push_slot::<bool>(CapacityReply::VT_OK, ok, false);
  }
  #[inline]
  pub fn add_node_id(&mut self, node_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CapacityReply::VT_NODE_ID, node_id);
  }
  #[inline]
  pub fn add_region(&mut self, region: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CapacityReply::VT_REGION, region);
  }
  #[inline]
  pub fn add_capabilities(&mut self, capabilities: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CapacityReply::VT_CAPABILITIES, capabilities);
  }
  #[inline]
  pub fn add_cpu_available_milli(&mut self, cpu_available_milli: u32) {
    self.fbb_.push_slot::<u32>(CapacityReply::VT_CPU_AVAILABLE_MILLI, cpu_available_milli, 0);
  }
  #[inline]
  pub fn add_memory_available_bytes(&mut self, memory_available_bytes: u64) {
    self.fbb_.push_slot::<u64>(CapacityReply::VT_MEMORY_AVAILABLE_BYTES, memory_available_bytes, 0);
  }
  #[inline]
  pub fn add_storage_available_bytes(&mut self, storage_available_bytes: u64) {
    self.fbb_.push_slot::<u64>(CapacityReply::VT_STORAGE_AVAILABLE_BYTES, storage_available_bytes, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CapacityReplyBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CapacityReplyBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CapacityReply<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CapacityReply<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CapacityReply");
      ds.field("request_id", &self.request_id());
      ds.field("ok", &self.ok());
      ds.field("node_id", &self.node_id());
      ds.field("region", &self.region());
      ds.field("capabilities", &self.capabilities());
      ds.field("cpu_available_milli", &self.cpu_available_milli());
      ds.field("memory_available_bytes", &self.memory_available_bytes());
      ds.field("storage_available_bytes", &self.storage_available_bytes());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `CapacityReply`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_capacity_reply_unchecked`.
pub fn root_as_capacity_reply(buf: &[u8]) -> Result<CapacityReply, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<CapacityReply>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `CapacityReply` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_capacity_reply_unchecked`.
pub fn size_prefixed_root_as_capacity_reply(buf: &[u8]) -> Result<CapacityReply, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<CapacityReply>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `CapacityReply` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_capacity_reply_unchecked`.
pub fn root_as_capacity_reply_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<CapacityReply<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<CapacityReply<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `CapacityReply` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_capacity_reply_unchecked`.
pub fn size_prefixed_root_as_capacity_reply_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<CapacityReply<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<CapacityReply<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a CapacityReply and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `CapacityReply`.
pub unsafe fn root_as_capacity_reply_unchecked(buf: &[u8]) -> CapacityReply {
  flatbuffers::root_unchecked::<CapacityReply>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed CapacityReply and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `CapacityReply`.
pub unsafe fn size_prefixed_root_as_capacity_reply_unchecked(buf: &[u8]) -> CapacityReply {
  flatbuffers::size_prefixed_root_unchecked::<CapacityReply>(buf)
}
#[inline]
pub fn finish_capacity_reply_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<CapacityReply<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_capacity_reply_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<CapacityReply<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod machine
}  // pub mod beemesh


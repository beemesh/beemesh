// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod beemesh {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod machine {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SIGNATURE_SCHEME: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SIGNATURE_SCHEME: i8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SIGNATURE_SCHEME: [SignatureScheme; 3] = [
  SignatureScheme::NONE,
  SignatureScheme::ED25519,
  SignatureScheme::RSA_PSS,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SignatureScheme(pub i8);
#[allow(non_upper_case_globals)]
impl SignatureScheme {
  pub const NONE: Self = Self(0);
  pub const ED25519: Self = Self(1);
  pub const RSA_PSS: Self = Self(2);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::ED25519,
    Self::RSA_PSS,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::ED25519 => Some("ED25519"),
      Self::RSA_PSS => Some("RSA_PSS"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SignatureScheme {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SignatureScheme {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe { flatbuffers::read_scalar_at::<i8>(buf, loc) };
    Self(b)
  }
}

impl flatbuffers::Push for SignatureScheme {
    type Output = SignatureScheme;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        unsafe { flatbuffers::emplace_scalar::<i8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for SignatureScheme {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SignatureScheme {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SignatureScheme {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_OPERATION_TYPE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_OPERATION_TYPE: i8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_OPERATION_TYPE: [OperationType; 3] = [
  OperationType::APPLY,
  OperationType::UPDATE,
  OperationType::DELETE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct OperationType(pub i8);
#[allow(non_upper_case_globals)]
impl OperationType {
  pub const APPLY: Self = Self(0);
  pub const UPDATE: Self = Self(1);
  pub const DELETE: Self = Self(2);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::APPLY,
    Self::UPDATE,
    Self::DELETE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::APPLY => Some("APPLY"),
      Self::UPDATE => Some("UPDATE"),
      Self::DELETE => Some("DELETE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for OperationType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for OperationType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe { flatbuffers::read_scalar_at::<i8>(buf, loc) };
    Self(b)
  }
}

impl flatbuffers::Push for OperationType {
    type Output = OperationType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        unsafe { flatbuffers::emplace_scalar::<i8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for OperationType {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for OperationType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for OperationType {}
pub enum KeyValueOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct KeyValue<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for KeyValue<'a> {
  type Inner = KeyValue<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> KeyValue<'a> {
  pub const VT_KEY: flatbuffers::VOffsetT = 4;
  pub const VT_VALUE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    KeyValue { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args KeyValueArgs<'args>
  ) -> flatbuffers::WIPOffset<KeyValue<'bldr>> {
    let mut builder = KeyValueBuilder::new(_fbb);
    if let Some(x) = args.value { builder.add_value(x); }
    if let Some(x) = args.key { builder.add_key(x); }
    builder.finish()
  }


  #[inline]
  pub fn key(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(KeyValue::VT_KEY, None)}
  }
  #[inline]
  pub fn value(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(KeyValue::VT_VALUE, None)}
  }
}

impl flatbuffers::Verifiable for KeyValue<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("key", Self::VT_KEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("value", Self::VT_VALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct KeyValueArgs<'a> {
    pub key: Option<flatbuffers::WIPOffset<&'a str>>,
    pub value: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for KeyValueArgs<'a> {
  #[inline]
  fn default() -> Self {
    KeyValueArgs {
      key: None,
      value: None,
    }
  }
}

pub struct KeyValueBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> KeyValueBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_key(&mut self, key: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(KeyValue::VT_KEY, key);
  }
  #[inline]
  pub fn add_value(&mut self, value: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(KeyValue::VT_VALUE, value);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> KeyValueBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    KeyValueBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<KeyValue<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for KeyValue<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("KeyValue");
      ds.field("key", &self.key());
      ds.field("value", &self.value());
      ds.finish()
  }
}
pub enum AppliedManifestOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AppliedManifest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AppliedManifest<'a> {
  type Inner = AppliedManifest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> AppliedManifest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TENANT: flatbuffers::VOffsetT = 6;
  pub const VT_OPERATION_ID: flatbuffers::VOffsetT = 8;
  pub const VT_ORIGIN_PEER: flatbuffers::VOffsetT = 10;
  pub const VT_OWNER_PUBKEY: flatbuffers::VOffsetT = 12;
  pub const VT_SIGNATURE_SCHEME: flatbuffers::VOffsetT = 14;
  pub const VT_SIGNATURE: flatbuffers::VOffsetT = 16;
  pub const VT_MANIFEST_JSON: flatbuffers::VOffsetT = 18;
  pub const VT_MANIFEST_KIND: flatbuffers::VOffsetT = 20;
  pub const VT_LABELS: flatbuffers::VOffsetT = 22;
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 24;
  pub const VT_OPERATION: flatbuffers::VOffsetT = 26;
  pub const VT_TTL_SECS: flatbuffers::VOffsetT = 28;
  pub const VT_CONTENT_HASH: flatbuffers::VOffsetT = 30;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AppliedManifest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AppliedManifestArgs<'args>
  ) -> flatbuffers::WIPOffset<AppliedManifest<'bldr>> {
    let mut builder = AppliedManifestBuilder::new(_fbb);
    builder.add_timestamp(args.timestamp);
    if let Some(x) = args.content_hash { builder.add_content_hash(x); }
    builder.add_ttl_secs(args.ttl_secs);
    if let Some(x) = args.labels { builder.add_labels(x); }
    if let Some(x) = args.manifest_kind { builder.add_manifest_kind(x); }
    if let Some(x) = args.manifest_json { builder.add_manifest_json(x); }
    if let Some(x) = args.signature { builder.add_signature(x); }
    if let Some(x) = args.owner_pubkey { builder.add_owner_pubkey(x); }
    if let Some(x) = args.origin_peer { builder.add_origin_peer(x); }
    if let Some(x) = args.operation_id { builder.add_operation_id(x); }
    if let Some(x) = args.tenant { builder.add_tenant(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_operation(args.operation);
    builder.add_signature_scheme(args.signature_scheme);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AppliedManifest::VT_ID, None)}
  }
  #[inline]
  pub fn tenant(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AppliedManifest::VT_TENANT, None)}
  }
  #[inline]
  pub fn operation_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AppliedManifest::VT_OPERATION_ID, None)}
  }
  #[inline]
  pub fn origin_peer(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AppliedManifest::VT_ORIGIN_PEER, None)}
  }
  #[inline]
  pub fn owner_pubkey(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(AppliedManifest::VT_OWNER_PUBKEY, None)}
  }
  #[inline]
  pub fn signature_scheme(&self) -> SignatureScheme {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SignatureScheme>(AppliedManifest::VT_SIGNATURE_SCHEME, Some(SignatureScheme::NONE)).unwrap()}
  }
  #[inline]
  pub fn signature(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(AppliedManifest::VT_SIGNATURE, None)}
  }
  #[inline]
  pub fn manifest_json(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AppliedManifest::VT_MANIFEST_JSON, None)}
  }
  #[inline]
  pub fn manifest_kind(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AppliedManifest::VT_MANIFEST_KIND, None)}
  }
  #[inline]
  pub fn labels(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<KeyValue<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<KeyValue>>>>(AppliedManifest::VT_LABELS, None)}
  }
  #[inline]
  pub fn timestamp(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(AppliedManifest::VT_TIMESTAMP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn operation(&self) -> OperationType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<OperationType>(AppliedManifest::VT_OPERATION, Some(OperationType::APPLY)).unwrap()}
  }
  #[inline]
  pub fn ttl_secs(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(AppliedManifest::VT_TTL_SECS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn content_hash(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AppliedManifest::VT_CONTENT_HASH, None)}
  }
}

impl flatbuffers::Verifiable for AppliedManifest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("tenant", Self::VT_TENANT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("operation_id", Self::VT_OPERATION_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin_peer", Self::VT_ORIGIN_PEER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("owner_pubkey", Self::VT_OWNER_PUBKEY, false)?
     .visit_field::<SignatureScheme>("signature_scheme", Self::VT_SIGNATURE_SCHEME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("signature", Self::VT_SIGNATURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("manifest_json", Self::VT_MANIFEST_JSON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("manifest_kind", Self::VT_MANIFEST_KIND, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<KeyValue>>>>("labels", Self::VT_LABELS, false)?
     .visit_field::<u64>("timestamp", Self::VT_TIMESTAMP, false)?
     .visit_field::<OperationType>("operation", Self::VT_OPERATION, false)?
     .visit_field::<u32>("ttl_secs", Self::VT_TTL_SECS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("content_hash", Self::VT_CONTENT_HASH, false)?
     .finish();
    Ok(())
  }
}
pub struct AppliedManifestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tenant: Option<flatbuffers::WIPOffset<&'a str>>,
    pub operation_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin_peer: Option<flatbuffers::WIPOffset<&'a str>>,
    pub owner_pubkey: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub signature_scheme: SignatureScheme,
    pub signature: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub manifest_json: Option<flatbuffers::WIPOffset<&'a str>>,
    pub manifest_kind: Option<flatbuffers::WIPOffset<&'a str>>,
    pub labels: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<KeyValue<'a>>>>>,
    pub timestamp: u64,
    pub operation: OperationType,
    pub ttl_secs: u32,
    pub content_hash: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for AppliedManifestArgs<'a> {
  #[inline]
  fn default() -> Self {
    AppliedManifestArgs {
      id: None,
      tenant: None,
      operation_id: None,
      origin_peer: None,
      owner_pubkey: None,
      signature_scheme: SignatureScheme::NONE,
      signature: None,
      manifest_json: None,
      manifest_kind: None,
      labels: None,
      timestamp: 0,
      operation: OperationType::APPLY,
      ttl_secs: 0,
      content_hash: None,
    }
  }
}

pub struct AppliedManifestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AppliedManifestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AppliedManifest::VT_ID, id);
  }
  #[inline]
  pub fn add_tenant(&mut self, tenant: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AppliedManifest::VT_TENANT, tenant);
  }
  #[inline]
  pub fn add_operation_id(&mut self, operation_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AppliedManifest::VT_OPERATION_ID, operation_id);
  }
  #[inline]
  pub fn add_origin_peer(&mut self, origin_peer: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AppliedManifest::VT_ORIGIN_PEER, origin_peer);
  }
  #[inline]
  pub fn add_owner_pubkey(&mut self, owner_pubkey: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AppliedManifest::VT_OWNER_PUBKEY, owner_pubkey);
  }
  #[inline]
  pub fn add_signature_scheme(&mut self, signature_scheme: SignatureScheme) {
    self.fbb_.push_slot::<SignatureScheme>(AppliedManifest::VT_SIGNATURE_SCHEME, signature_scheme, SignatureScheme::NONE);
  }
  #[inline]
  pub fn add_signature(&mut self, signature: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AppliedManifest::VT_SIGNATURE, signature);
  }
  #[inline]
  pub fn add_manifest_json(&mut self, manifest_json: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AppliedManifest::VT_MANIFEST_JSON, manifest_json);
  }
  #[inline]
  pub fn add_manifest_kind(&mut self, manifest_kind: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AppliedManifest::VT_MANIFEST_KIND, manifest_kind);
  }
  #[inline]
  pub fn add_labels(&mut self, labels: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<KeyValue<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AppliedManifest::VT_LABELS, labels);
  }
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: u64) {
    self.fbb_.push_slot::<u64>(AppliedManifest::VT_TIMESTAMP, timestamp, 0);
  }
  #[inline]
  pub fn add_operation(&mut self, operation: OperationType) {
    self.fbb_.push_slot::<OperationType>(AppliedManifest::VT_OPERATION, operation, OperationType::APPLY);
  }
  #[inline]
  pub fn add_ttl_secs(&mut self, ttl_secs: u32) {
    self.fbb_.push_slot::<u32>(AppliedManifest::VT_TTL_SECS, ttl_secs, 0);
  }
  #[inline]
  pub fn add_content_hash(&mut self, content_hash: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AppliedManifest::VT_CONTENT_HASH, content_hash);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AppliedManifestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AppliedManifestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AppliedManifest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AppliedManifest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AppliedManifest");
      ds.field("id", &self.id());
      ds.field("tenant", &self.tenant());
      ds.field("operation_id", &self.operation_id());
      ds.field("origin_peer", &self.origin_peer());
      ds.field("owner_pubkey", &self.owner_pubkey());
      ds.field("signature_scheme", &self.signature_scheme());
      ds.field("signature", &self.signature());
      ds.field("manifest_json", &self.manifest_json());
      ds.field("manifest_kind", &self.manifest_kind());
      ds.field("labels", &self.labels());
      ds.field("timestamp", &self.timestamp());
      ds.field("operation", &self.operation());
      ds.field("ttl_secs", &self.ttl_secs());
      ds.field("content_hash", &self.content_hash());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AppliedManifest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_applied_manifest_unchecked`.
pub fn root_as_applied_manifest(buf: &[u8]) -> Result<AppliedManifest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AppliedManifest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AppliedManifest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_applied_manifest_unchecked`.
pub fn size_prefixed_root_as_applied_manifest(buf: &[u8]) -> Result<AppliedManifest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AppliedManifest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AppliedManifest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_applied_manifest_unchecked`.
pub fn root_as_applied_manifest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AppliedManifest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AppliedManifest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AppliedManifest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_applied_manifest_unchecked`.
pub fn size_prefixed_root_as_applied_manifest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AppliedManifest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AppliedManifest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AppliedManifest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AppliedManifest`.
pub unsafe fn root_as_applied_manifest_unchecked(buf: &[u8]) -> AppliedManifest {
  unsafe { flatbuffers::root_unchecked::<AppliedManifest>(buf) }
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AppliedManifest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AppliedManifest`.
pub unsafe fn size_prefixed_root_as_applied_manifest_unchecked(buf: &[u8]) -> AppliedManifest {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<AppliedManifest>(buf) }
}
#[inline]
pub fn finish_applied_manifest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<AppliedManifest<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_applied_manifest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<AppliedManifest<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod machine
}  // pub mod beemesh


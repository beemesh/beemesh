// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod beemesh {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod machine {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum EncryptedManifestOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EncryptedManifest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EncryptedManifest<'a> {
  type Inner = EncryptedManifest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> EncryptedManifest<'a> {
  pub const VT_NONCE: flatbuffers::VOffsetT = 4;
  pub const VT_PAYLOAD: flatbuffers::VOffsetT = 6;
  pub const VT_ENCRYPTION_ALGORITHM: flatbuffers::VOffsetT = 8;
  pub const VT_THRESHOLD: flatbuffers::VOffsetT = 10;
  pub const VT_TOTAL_SHARES: flatbuffers::VOffsetT = 12;
  pub const VT_MANIFEST_TYPE: flatbuffers::VOffsetT = 14;
  pub const VT_LABELS: flatbuffers::VOffsetT = 16;
  pub const VT_ENCRYPTED_AT: flatbuffers::VOffsetT = 18;
  pub const VT_CONTENT_HASH: flatbuffers::VOffsetT = 20;
  pub const VT_VERSION: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EncryptedManifest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EncryptedManifestArgs<'args>
  ) -> flatbuffers::WIPOffset<EncryptedManifest<'bldr>> {
    let mut builder = EncryptedManifestBuilder::new(_fbb);
    builder.add_encrypted_at(args.encrypted_at);
    builder.add_version(args.version);
    if let Some(x) = args.content_hash { builder.add_content_hash(x); }
    if let Some(x) = args.labels { builder.add_labels(x); }
    if let Some(x) = args.manifest_type { builder.add_manifest_type(x); }
    builder.add_total_shares(args.total_shares);
    builder.add_threshold(args.threshold);
    if let Some(x) = args.encryption_algorithm { builder.add_encryption_algorithm(x); }
    if let Some(x) = args.payload { builder.add_payload(x); }
    if let Some(x) = args.nonce { builder.add_nonce(x); }
    builder.finish()
  }


  #[inline]
  pub fn nonce(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EncryptedManifest::VT_NONCE, None)}
  }
  #[inline]
  pub fn payload(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EncryptedManifest::VT_PAYLOAD, None)}
  }
  #[inline]
  pub fn encryption_algorithm(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EncryptedManifest::VT_ENCRYPTION_ALGORITHM, None)}
  }
  #[inline]
  pub fn threshold(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(EncryptedManifest::VT_THRESHOLD, Some(0)).unwrap()}
  }
  #[inline]
  pub fn total_shares(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(EncryptedManifest::VT_TOTAL_SHARES, Some(0)).unwrap()}
  }
  #[inline]
  pub fn manifest_type(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EncryptedManifest::VT_MANIFEST_TYPE, None)}
  }
  #[inline]
  pub fn labels(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EncryptedManifest::VT_LABELS, None)}
  }
  #[inline]
  pub fn encrypted_at(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(EncryptedManifest::VT_ENCRYPTED_AT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn content_hash(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EncryptedManifest::VT_CONTENT_HASH, None)}
  }
  #[inline]
  pub fn version(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(EncryptedManifest::VT_VERSION, Some(1)).unwrap()}
  }
}

impl flatbuffers::Verifiable for EncryptedManifest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("nonce", Self::VT_NONCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("payload", Self::VT_PAYLOAD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("encryption_algorithm", Self::VT_ENCRYPTION_ALGORITHM, false)?
     .visit_field::<u32>("threshold", Self::VT_THRESHOLD, false)?
     .visit_field::<u32>("total_shares", Self::VT_TOTAL_SHARES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("manifest_type", Self::VT_MANIFEST_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("labels", Self::VT_LABELS, false)?
     .visit_field::<u64>("encrypted_at", Self::VT_ENCRYPTED_AT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("content_hash", Self::VT_CONTENT_HASH, false)?
     .visit_field::<u32>("version", Self::VT_VERSION, false)?
     .finish();
    Ok(())
  }
}
pub struct EncryptedManifestArgs<'a> {
    pub nonce: Option<flatbuffers::WIPOffset<&'a str>>,
    pub payload: Option<flatbuffers::WIPOffset<&'a str>>,
    pub encryption_algorithm: Option<flatbuffers::WIPOffset<&'a str>>,
    pub threshold: u32,
    pub total_shares: u32,
    pub manifest_type: Option<flatbuffers::WIPOffset<&'a str>>,
    pub labels: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub encrypted_at: u64,
    pub content_hash: Option<flatbuffers::WIPOffset<&'a str>>,
    pub version: u32,
}
impl<'a> Default for EncryptedManifestArgs<'a> {
  #[inline]
  fn default() -> Self {
    EncryptedManifestArgs {
      nonce: None,
      payload: None,
      encryption_algorithm: None,
      threshold: 0,
      total_shares: 0,
      manifest_type: None,
      labels: None,
      encrypted_at: 0,
      content_hash: None,
      version: 1,
    }
  }
}

pub struct EncryptedManifestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EncryptedManifestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_nonce(&mut self, nonce: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EncryptedManifest::VT_NONCE, nonce);
  }
  #[inline]
  pub fn add_payload(&mut self, payload: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EncryptedManifest::VT_PAYLOAD, payload);
  }
  #[inline]
  pub fn add_encryption_algorithm(&mut self, encryption_algorithm: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EncryptedManifest::VT_ENCRYPTION_ALGORITHM, encryption_algorithm);
  }
  #[inline]
  pub fn add_threshold(&mut self, threshold: u32) {
    self.fbb_.push_slot::<u32>(EncryptedManifest::VT_THRESHOLD, threshold, 0);
  }
  #[inline]
  pub fn add_total_shares(&mut self, total_shares: u32) {
    self.fbb_.push_slot::<u32>(EncryptedManifest::VT_TOTAL_SHARES, total_shares, 0);
  }
  #[inline]
  pub fn add_manifest_type(&mut self, manifest_type: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EncryptedManifest::VT_MANIFEST_TYPE, manifest_type);
  }
  #[inline]
  pub fn add_labels(&mut self, labels: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EncryptedManifest::VT_LABELS, labels);
  }
  #[inline]
  pub fn add_encrypted_at(&mut self, encrypted_at: u64) {
    self.fbb_.push_slot::<u64>(EncryptedManifest::VT_ENCRYPTED_AT, encrypted_at, 0);
  }
  #[inline]
  pub fn add_content_hash(&mut self, content_hash: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EncryptedManifest::VT_CONTENT_HASH, content_hash);
  }
  #[inline]
  pub fn add_version(&mut self, version: u32) {
    self.fbb_.push_slot::<u32>(EncryptedManifest::VT_VERSION, version, 1);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EncryptedManifestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EncryptedManifestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EncryptedManifest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EncryptedManifest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EncryptedManifest");
      ds.field("nonce", &self.nonce());
      ds.field("payload", &self.payload());
      ds.field("encryption_algorithm", &self.encryption_algorithm());
      ds.field("threshold", &self.threshold());
      ds.field("total_shares", &self.total_shares());
      ds.field("manifest_type", &self.manifest_type());
      ds.field("labels", &self.labels());
      ds.field("encrypted_at", &self.encrypted_at());
      ds.field("content_hash", &self.content_hash());
      ds.field("version", &self.version());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `EncryptedManifest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_encrypted_manifest_unchecked`.
pub fn root_as_encrypted_manifest(buf: &[u8]) -> Result<EncryptedManifest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<EncryptedManifest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `EncryptedManifest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_encrypted_manifest_unchecked`.
pub fn size_prefixed_root_as_encrypted_manifest(buf: &[u8]) -> Result<EncryptedManifest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<EncryptedManifest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `EncryptedManifest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_encrypted_manifest_unchecked`.
pub fn root_as_encrypted_manifest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EncryptedManifest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<EncryptedManifest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `EncryptedManifest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_encrypted_manifest_unchecked`.
pub fn size_prefixed_root_as_encrypted_manifest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EncryptedManifest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<EncryptedManifest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a EncryptedManifest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `EncryptedManifest`.
pub unsafe fn root_as_encrypted_manifest_unchecked(buf: &[u8]) -> EncryptedManifest {
  unsafe { flatbuffers::root_unchecked::<EncryptedManifest>(buf) }
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed EncryptedManifest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `EncryptedManifest`.
pub unsafe fn size_prefixed_root_as_encrypted_manifest_unchecked(buf: &[u8]) -> EncryptedManifest {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<EncryptedManifest>(buf) }
}
#[inline]
pub fn finish_encrypted_manifest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<EncryptedManifest<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_encrypted_manifest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<EncryptedManifest<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod machine
}  // pub mod beemesh


// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod beemesh {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod machine {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum EnvelopeOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Envelope<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Envelope<'a> {
  type Inner = Envelope<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> Envelope<'a> {
  pub const VT_PAYLOAD: flatbuffers::VOffsetT = 4;
  pub const VT_PAYLOAD_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_NONCE: flatbuffers::VOffsetT = 8;
  pub const VT_TS: flatbuffers::VOffsetT = 10;
  pub const VT_ALG: flatbuffers::VOffsetT = 12;
  pub const VT_SIG: flatbuffers::VOffsetT = 14;
  pub const VT_PUBKEY: flatbuffers::VOffsetT = 16;
  pub const VT_PEER_ID: flatbuffers::VOffsetT = 18;
  pub const VT_KEM_PUBKEY: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Envelope { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EnvelopeArgs<'args>
  ) -> flatbuffers::WIPOffset<Envelope<'bldr>> {
    let mut builder = EnvelopeBuilder::new(_fbb);
    builder.add_ts(args.ts);
    if let Some(x) = args.kem_pubkey { builder.add_kem_pubkey(x); }
    if let Some(x) = args.peer_id { builder.add_peer_id(x); }
    if let Some(x) = args.pubkey { builder.add_pubkey(x); }
    if let Some(x) = args.sig { builder.add_sig(x); }
    if let Some(x) = args.alg { builder.add_alg(x); }
    if let Some(x) = args.nonce { builder.add_nonce(x); }
    if let Some(x) = args.payload_type { builder.add_payload_type(x); }
    if let Some(x) = args.payload { builder.add_payload(x); }
    builder.finish()
  }


  #[inline]
  pub fn payload(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Envelope::VT_PAYLOAD, None)}
  }
  #[inline]
  pub fn payload_type(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Envelope::VT_PAYLOAD_TYPE, None)}
  }
  #[inline]
  pub fn nonce(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Envelope::VT_NONCE, None)}
  }
  #[inline]
  pub fn ts(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Envelope::VT_TS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn alg(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Envelope::VT_ALG, None)}
  }
  #[inline]
  pub fn sig(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Envelope::VT_SIG, None)}
  }
  #[inline]
  pub fn pubkey(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Envelope::VT_PUBKEY, None)}
  }
  #[inline]
  pub fn peer_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Envelope::VT_PEER_ID, None)}
  }
  #[inline]
  pub fn kem_pubkey(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Envelope::VT_KEM_PUBKEY, None)}
  }
}

impl flatbuffers::Verifiable for Envelope<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("payload", Self::VT_PAYLOAD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("payload_type", Self::VT_PAYLOAD_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("nonce", Self::VT_NONCE, false)?
     .visit_field::<u64>("ts", Self::VT_TS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("alg", Self::VT_ALG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sig", Self::VT_SIG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("pubkey", Self::VT_PUBKEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("peer_id", Self::VT_PEER_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("kem_pubkey", Self::VT_KEM_PUBKEY, false)?
     .finish();
    Ok(())
  }
}
pub struct EnvelopeArgs<'a> {
    pub payload: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub payload_type: Option<flatbuffers::WIPOffset<&'a str>>,
    pub nonce: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ts: u64,
    pub alg: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sig: Option<flatbuffers::WIPOffset<&'a str>>,
    pub pubkey: Option<flatbuffers::WIPOffset<&'a str>>,
    pub peer_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub kem_pubkey: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EnvelopeArgs<'a> {
  #[inline]
  fn default() -> Self {
    EnvelopeArgs {
      payload: None,
      payload_type: None,
      nonce: None,
      ts: 0,
      alg: None,
      sig: None,
      pubkey: None,
      peer_id: None,
      kem_pubkey: None,
    }
  }
}

pub struct EnvelopeBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EnvelopeBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_payload(&mut self, payload: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Envelope::VT_PAYLOAD, payload);
  }
  #[inline]
  pub fn add_payload_type(&mut self, payload_type: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Envelope::VT_PAYLOAD_TYPE, payload_type);
  }
  #[inline]
  pub fn add_nonce(&mut self, nonce: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Envelope::VT_NONCE, nonce);
  }
  #[inline]
  pub fn add_ts(&mut self, ts: u64) {
    self.fbb_.push_slot::<u64>(Envelope::VT_TS, ts, 0);
  }
  #[inline]
  pub fn add_alg(&mut self, alg: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Envelope::VT_ALG, alg);
  }
  #[inline]
  pub fn add_sig(&mut self, sig: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Envelope::VT_SIG, sig);
  }
  #[inline]
  pub fn add_pubkey(&mut self, pubkey: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Envelope::VT_PUBKEY, pubkey);
  }
  #[inline]
  pub fn add_peer_id(&mut self, peer_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Envelope::VT_PEER_ID, peer_id);
  }
  #[inline]
  pub fn add_kem_pubkey(&mut self, kem_pubkey: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Envelope::VT_KEM_PUBKEY, kem_pubkey);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EnvelopeBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EnvelopeBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Envelope<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Envelope<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Envelope");
      ds.field("payload", &self.payload());
      ds.field("payload_type", &self.payload_type());
      ds.field("nonce", &self.nonce());
      ds.field("ts", &self.ts());
      ds.field("alg", &self.alg());
      ds.field("sig", &self.sig());
      ds.field("pubkey", &self.pubkey());
      ds.field("peer_id", &self.peer_id());
      ds.field("kem_pubkey", &self.kem_pubkey());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Envelope`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_envelope_unchecked`.
pub fn root_as_envelope(buf: &[u8]) -> Result<Envelope, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Envelope>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Envelope` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_envelope_unchecked`.
pub fn size_prefixed_root_as_envelope(buf: &[u8]) -> Result<Envelope, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Envelope>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Envelope` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_envelope_unchecked`.
pub fn root_as_envelope_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Envelope<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Envelope<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Envelope` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_envelope_unchecked`.
pub fn size_prefixed_root_as_envelope_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Envelope<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Envelope<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Envelope and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Envelope`.
pub unsafe fn root_as_envelope_unchecked(buf: &[u8]) -> Envelope {
  unsafe { flatbuffers::root_unchecked::<Envelope>(buf) }
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Envelope and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Envelope`.
pub unsafe fn size_prefixed_root_as_envelope_unchecked(buf: &[u8]) -> Envelope {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<Envelope>(buf) }
}
#[inline]
pub fn finish_envelope_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Envelope<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_envelope_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Envelope<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod machine
}  // pub mod beemesh


// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod beemesh {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod machine {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum CapabilityTargetOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CapabilityTarget<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CapabilityTarget<'a> {
  type Inner = CapabilityTarget<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> CapabilityTarget<'a> {
  pub const VT_PEER_ID: flatbuffers::VOffsetT = 4;
  pub const VT_PAYLOAD_JSON: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CapabilityTarget { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CapabilityTargetArgs<'args>
  ) -> flatbuffers::WIPOffset<CapabilityTarget<'bldr>> {
    let mut builder = CapabilityTargetBuilder::new(_fbb);
    if let Some(x) = args.payload_json { builder.add_payload_json(x); }
    if let Some(x) = args.peer_id { builder.add_peer_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn peer_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CapabilityTarget::VT_PEER_ID, None)}
  }
  #[inline]
  pub fn payload_json(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CapabilityTarget::VT_PAYLOAD_JSON, None)}
  }
}

impl flatbuffers::Verifiable for CapabilityTarget<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("peer_id", Self::VT_PEER_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("payload_json", Self::VT_PAYLOAD_JSON, false)?
     .finish();
    Ok(())
  }
}
pub struct CapabilityTargetArgs<'a> {
    pub peer_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub payload_json: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for CapabilityTargetArgs<'a> {
  #[inline]
  fn default() -> Self {
    CapabilityTargetArgs {
      peer_id: None,
      payload_json: None,
    }
  }
}

pub struct CapabilityTargetBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CapabilityTargetBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_peer_id(&mut self, peer_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CapabilityTarget::VT_PEER_ID, peer_id);
  }
  #[inline]
  pub fn add_payload_json(&mut self, payload_json: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CapabilityTarget::VT_PAYLOAD_JSON, payload_json);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CapabilityTargetBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CapabilityTargetBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CapabilityTarget<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CapabilityTarget<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CapabilityTarget");
      ds.field("peer_id", &self.peer_id());
      ds.field("payload_json", &self.payload_json());
      ds.finish()
  }
}
pub enum DistributeCapabilitiesRequestOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DistributeCapabilitiesRequest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DistributeCapabilitiesRequest<'a> {
  type Inner = DistributeCapabilitiesRequest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> DistributeCapabilitiesRequest<'a> {
  pub const VT_TARGETS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DistributeCapabilitiesRequest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DistributeCapabilitiesRequestArgs<'args>
  ) -> flatbuffers::WIPOffset<DistributeCapabilitiesRequest<'bldr>> {
    let mut builder = DistributeCapabilitiesRequestBuilder::new(_fbb);
    if let Some(x) = args.targets { builder.add_targets(x); }
    builder.finish()
  }


  #[inline]
  pub fn targets(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CapabilityTarget<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CapabilityTarget>>>>(DistributeCapabilitiesRequest::VT_TARGETS, None)}
  }
}

impl flatbuffers::Verifiable for DistributeCapabilitiesRequest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<CapabilityTarget>>>>("targets", Self::VT_TARGETS, false)?
     .finish();
    Ok(())
  }
}
pub struct DistributeCapabilitiesRequestArgs<'a> {
    pub targets: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CapabilityTarget<'a>>>>>,
}
impl<'a> Default for DistributeCapabilitiesRequestArgs<'a> {
  #[inline]
  fn default() -> Self {
    DistributeCapabilitiesRequestArgs {
      targets: None,
    }
  }
}

pub struct DistributeCapabilitiesRequestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DistributeCapabilitiesRequestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_targets(&mut self, targets: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<CapabilityTarget<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DistributeCapabilitiesRequest::VT_TARGETS, targets);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DistributeCapabilitiesRequestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DistributeCapabilitiesRequestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DistributeCapabilitiesRequest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DistributeCapabilitiesRequest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DistributeCapabilitiesRequest");
      ds.field("targets", &self.targets());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `DistributeCapabilitiesRequest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_distribute_capabilities_request_unchecked`.
pub fn root_as_distribute_capabilities_request(buf: &[u8]) -> Result<DistributeCapabilitiesRequest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<DistributeCapabilitiesRequest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `DistributeCapabilitiesRequest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_distribute_capabilities_request_unchecked`.
pub fn size_prefixed_root_as_distribute_capabilities_request(buf: &[u8]) -> Result<DistributeCapabilitiesRequest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<DistributeCapabilitiesRequest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `DistributeCapabilitiesRequest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_distribute_capabilities_request_unchecked`.
pub fn root_as_distribute_capabilities_request_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DistributeCapabilitiesRequest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<DistributeCapabilitiesRequest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `DistributeCapabilitiesRequest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_distribute_capabilities_request_unchecked`.
pub fn size_prefixed_root_as_distribute_capabilities_request_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DistributeCapabilitiesRequest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<DistributeCapabilitiesRequest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a DistributeCapabilitiesRequest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `DistributeCapabilitiesRequest`.
pub unsafe fn root_as_distribute_capabilities_request_unchecked(buf: &[u8]) -> DistributeCapabilitiesRequest {
  unsafe { flatbuffers::root_unchecked::<DistributeCapabilitiesRequest>(buf) }
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed DistributeCapabilitiesRequest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `DistributeCapabilitiesRequest`.
pub unsafe fn size_prefixed_root_as_distribute_capabilities_request_unchecked(buf: &[u8]) -> DistributeCapabilitiesRequest {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<DistributeCapabilitiesRequest>(buf) }
}
#[inline]
pub fn finish_distribute_capabilities_request_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<DistributeCapabilitiesRequest<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_distribute_capabilities_request_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<DistributeCapabilitiesRequest<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod machine
}  // pub mod beemesh


// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod beemesh {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod machine {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum ManifestFetchRequestOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ManifestFetchRequest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ManifestFetchRequest<'a> {
  type Inner = ManifestFetchRequest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ManifestFetchRequest<'a> {
  pub const VT_MANIFEST_ID: flatbuffers::VOffsetT = 4;
  pub const VT_VERSION: flatbuffers::VOffsetT = 6;
  pub const VT_CAPABILITY_TOKEN: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ManifestFetchRequest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ManifestFetchRequestArgs<'args>
  ) -> flatbuffers::WIPOffset<ManifestFetchRequest<'bldr>> {
    let mut builder = ManifestFetchRequestBuilder::new(_fbb);
    builder.add_version(args.version);
    if let Some(x) = args.capability_token { builder.add_capability_token(x); }
    if let Some(x) = args.manifest_id { builder.add_manifest_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn manifest_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ManifestFetchRequest::VT_MANIFEST_ID, None)}
  }
  #[inline]
  pub fn version(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ManifestFetchRequest::VT_VERSION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn capability_token(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ManifestFetchRequest::VT_CAPABILITY_TOKEN, None)}
  }
}

impl flatbuffers::Verifiable for ManifestFetchRequest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("manifest_id", Self::VT_MANIFEST_ID, false)?
     .visit_field::<u64>("version", Self::VT_VERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("capability_token", Self::VT_CAPABILITY_TOKEN, false)?
     .finish();
    Ok(())
  }
}
pub struct ManifestFetchRequestArgs<'a> {
    pub manifest_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub version: u64,
    pub capability_token: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ManifestFetchRequestArgs<'a> {
  #[inline]
  fn default() -> Self {
    ManifestFetchRequestArgs {
      manifest_id: None,
      version: 0,
      capability_token: None,
    }
  }
}

pub struct ManifestFetchRequestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ManifestFetchRequestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_manifest_id(&mut self, manifest_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManifestFetchRequest::VT_MANIFEST_ID, manifest_id);
  }
  #[inline]
  pub fn add_version(&mut self, version: u64) {
    self.fbb_.push_slot::<u64>(ManifestFetchRequest::VT_VERSION, version, 0);
  }
  #[inline]
  pub fn add_capability_token(&mut self, capability_token: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManifestFetchRequest::VT_CAPABILITY_TOKEN, capability_token);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ManifestFetchRequestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ManifestFetchRequestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ManifestFetchRequest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ManifestFetchRequest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ManifestFetchRequest");
      ds.field("manifest_id", &self.manifest_id());
      ds.field("version", &self.version());
      ds.field("capability_token", &self.capability_token());
      ds.finish()
  }
}
pub enum ManifestFetchResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ManifestFetchResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ManifestFetchResponse<'a> {
  type Inner = ManifestFetchResponse<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ManifestFetchResponse<'a> {
  pub const VT_SUCCESS: flatbuffers::VOffsetT = 4;
  pub const VT_MANIFEST_DATA: flatbuffers::VOffsetT = 6;
  pub const VT_VERSION: flatbuffers::VOffsetT = 8;
  pub const VT_ERROR: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ManifestFetchResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ManifestFetchResponseArgs<'args>
  ) -> flatbuffers::WIPOffset<ManifestFetchResponse<'bldr>> {
    let mut builder = ManifestFetchResponseBuilder::new(_fbb);
    builder.add_version(args.version);
    if let Some(x) = args.error { builder.add_error(x); }
    if let Some(x) = args.manifest_data { builder.add_manifest_data(x); }
    builder.add_success(args.success);
    builder.finish()
  }


  #[inline]
  pub fn success(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ManifestFetchResponse::VT_SUCCESS, Some(false)).unwrap()}
  }
  #[inline]
  pub fn manifest_data(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(ManifestFetchResponse::VT_MANIFEST_DATA, None)}
  }
  #[inline]
  pub fn version(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ManifestFetchResponse::VT_VERSION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn error(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ManifestFetchResponse::VT_ERROR, None)}
  }
}

impl flatbuffers::Verifiable for ManifestFetchResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("success", Self::VT_SUCCESS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("manifest_data", Self::VT_MANIFEST_DATA, false)?
     .visit_field::<u64>("version", Self::VT_VERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("error", Self::VT_ERROR, false)?
     .finish();
    Ok(())
  }
}
pub struct ManifestFetchResponseArgs<'a> {
    pub success: bool,
    pub manifest_data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub version: u64,
    pub error: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ManifestFetchResponseArgs<'a> {
  #[inline]
  fn default() -> Self {
    ManifestFetchResponseArgs {
      success: false,
      manifest_data: None,
      version: 0,
      error: None,
    }
  }
}

pub struct ManifestFetchResponseBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ManifestFetchResponseBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_success(&mut self, success: bool) {
    self.fbb_.push_slot::<bool>(ManifestFetchResponse::VT_SUCCESS, success, false);
  }
  #[inline]
  pub fn add_manifest_data(&mut self, manifest_data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManifestFetchResponse::VT_MANIFEST_DATA, manifest_data);
  }
  #[inline]
  pub fn add_version(&mut self, version: u64) {
    self.fbb_.push_slot::<u64>(ManifestFetchResponse::VT_VERSION, version, 0);
  }
  #[inline]
  pub fn add_error(&mut self, error: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManifestFetchResponse::VT_ERROR, error);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ManifestFetchResponseBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ManifestFetchResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ManifestFetchResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ManifestFetchResponse<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ManifestFetchResponse");
      ds.field("success", &self.success());
      ds.field("manifest_data", &self.manifest_data());
      ds.field("version", &self.version());
      ds.field("error", &self.error());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ManifestFetchRequest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_manifest_fetch_request_unchecked`.
pub fn root_as_manifest_fetch_request(buf: &[u8]) -> Result<ManifestFetchRequest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ManifestFetchRequest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ManifestFetchRequest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_manifest_fetch_request_unchecked`.
pub fn size_prefixed_root_as_manifest_fetch_request(buf: &[u8]) -> Result<ManifestFetchRequest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ManifestFetchRequest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ManifestFetchRequest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_manifest_fetch_request_unchecked`.
pub fn root_as_manifest_fetch_request_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ManifestFetchRequest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ManifestFetchRequest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ManifestFetchRequest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_manifest_fetch_request_unchecked`.
pub fn size_prefixed_root_as_manifest_fetch_request_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ManifestFetchRequest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ManifestFetchRequest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ManifestFetchRequest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ManifestFetchRequest`.
pub unsafe fn root_as_manifest_fetch_request_unchecked(buf: &[u8]) -> ManifestFetchRequest {
  flatbuffers::root_unchecked::<ManifestFetchRequest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ManifestFetchRequest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ManifestFetchRequest`.
pub unsafe fn size_prefixed_root_as_manifest_fetch_request_unchecked(buf: &[u8]) -> ManifestFetchRequest {
  flatbuffers::size_prefixed_root_unchecked::<ManifestFetchRequest>(buf)
}
#[inline]
pub fn finish_manifest_fetch_request_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<ManifestFetchRequest<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_manifest_fetch_request_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<ManifestFetchRequest<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod machine
}  // pub mod beemesh


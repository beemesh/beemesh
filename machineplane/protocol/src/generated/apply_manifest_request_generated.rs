// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod beemesh {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod machine {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum ApplyManifestRequestOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ApplyManifestRequest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ApplyManifestRequest<'a> {
  type Inner = ApplyManifestRequest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> ApplyManifestRequest<'a> {
  pub const VT_MANIFEST_ENVELOPE_JSON: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ApplyManifestRequest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ApplyManifestRequestArgs<'args>
  ) -> flatbuffers::WIPOffset<ApplyManifestRequest<'bldr>> {
    let mut builder = ApplyManifestRequestBuilder::new(_fbb);
    if let Some(x) = args.manifest_envelope_json { builder.add_manifest_envelope_json(x); }
    builder.finish()
  }


  #[inline]
  pub fn manifest_envelope_json(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ApplyManifestRequest::VT_MANIFEST_ENVELOPE_JSON, None)}
  }
}

impl flatbuffers::Verifiable for ApplyManifestRequest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("manifest_envelope_json", Self::VT_MANIFEST_ENVELOPE_JSON, false)?
     .finish();
    Ok(())
  }
}
pub struct ApplyManifestRequestArgs<'a> {
    pub manifest_envelope_json: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ApplyManifestRequestArgs<'a> {
  #[inline]
  fn default() -> Self {
    ApplyManifestRequestArgs {
      manifest_envelope_json: None,
    }
  }
}

pub struct ApplyManifestRequestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ApplyManifestRequestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_manifest_envelope_json(&mut self, manifest_envelope_json: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ApplyManifestRequest::VT_MANIFEST_ENVELOPE_JSON, manifest_envelope_json);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ApplyManifestRequestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ApplyManifestRequestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ApplyManifestRequest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ApplyManifestRequest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ApplyManifestRequest");
      ds.field("manifest_envelope_json", &self.manifest_envelope_json());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ApplyManifestRequest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_apply_manifest_request_unchecked`.
pub fn root_as_apply_manifest_request(buf: &[u8]) -> Result<ApplyManifestRequest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ApplyManifestRequest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ApplyManifestRequest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_apply_manifest_request_unchecked`.
pub fn size_prefixed_root_as_apply_manifest_request(buf: &[u8]) -> Result<ApplyManifestRequest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ApplyManifestRequest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ApplyManifestRequest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_apply_manifest_request_unchecked`.
pub fn root_as_apply_manifest_request_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ApplyManifestRequest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ApplyManifestRequest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ApplyManifestRequest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_apply_manifest_request_unchecked`.
pub fn size_prefixed_root_as_apply_manifest_request_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ApplyManifestRequest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ApplyManifestRequest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ApplyManifestRequest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ApplyManifestRequest`.
pub unsafe fn root_as_apply_manifest_request_unchecked(buf: &[u8]) -> ApplyManifestRequest {
  unsafe { flatbuffers::root_unchecked::<ApplyManifestRequest>(buf) }
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ApplyManifestRequest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ApplyManifestRequest`.
pub unsafe fn size_prefixed_root_as_apply_manifest_request_unchecked(buf: &[u8]) -> ApplyManifestRequest {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<ApplyManifestRequest>(buf) }
}
#[inline]
pub fn finish_apply_manifest_request_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<ApplyManifestRequest<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_apply_manifest_request_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<ApplyManifestRequest<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod machine
}  // pub mod beemesh


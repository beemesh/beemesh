// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod beemesh {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod machine {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum DeleteRequestOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DeleteRequest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DeleteRequest<'a> {
  type Inner = DeleteRequest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> DeleteRequest<'a> {
  pub const VT_MANIFEST_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TENANT: flatbuffers::VOffsetT = 6;
  pub const VT_OPERATION_ID: flatbuffers::VOffsetT = 8;
  pub const VT_ORIGIN_PEER: flatbuffers::VOffsetT = 10;
  pub const VT_FORCE: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DeleteRequest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DeleteRequestArgs<'args>
  ) -> flatbuffers::WIPOffset<DeleteRequest<'bldr>> {
    let mut builder = DeleteRequestBuilder::new(_fbb);
    if let Some(x) = args.origin_peer { builder.add_origin_peer(x); }
    if let Some(x) = args.operation_id { builder.add_operation_id(x); }
    if let Some(x) = args.tenant { builder.add_tenant(x); }
    if let Some(x) = args.manifest_id { builder.add_manifest_id(x); }
    builder.add_force(args.force);
    builder.finish()
  }


  #[inline]
  pub fn manifest_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DeleteRequest::VT_MANIFEST_ID, None)}
  }
  #[inline]
  pub fn tenant(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DeleteRequest::VT_TENANT, None)}
  }
  #[inline]
  pub fn operation_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DeleteRequest::VT_OPERATION_ID, None)}
  }
  #[inline]
  pub fn origin_peer(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DeleteRequest::VT_ORIGIN_PEER, None)}
  }
  #[inline]
  pub fn force(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(DeleteRequest::VT_FORCE, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for DeleteRequest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("manifest_id", Self::VT_MANIFEST_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("tenant", Self::VT_TENANT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("operation_id", Self::VT_OPERATION_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin_peer", Self::VT_ORIGIN_PEER, false)?
     .visit_field::<bool>("force", Self::VT_FORCE, false)?
     .finish();
    Ok(())
  }
}
pub struct DeleteRequestArgs<'a> {
    pub manifest_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tenant: Option<flatbuffers::WIPOffset<&'a str>>,
    pub operation_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin_peer: Option<flatbuffers::WIPOffset<&'a str>>,
    pub force: bool,
}
impl<'a> Default for DeleteRequestArgs<'a> {
  #[inline]
  fn default() -> Self {
    DeleteRequestArgs {
      manifest_id: None,
      tenant: None,
      operation_id: None,
      origin_peer: None,
      force: false,
    }
  }
}

pub struct DeleteRequestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DeleteRequestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_manifest_id(&mut self, manifest_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DeleteRequest::VT_MANIFEST_ID, manifest_id);
  }
  #[inline]
  pub fn add_tenant(&mut self, tenant: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DeleteRequest::VT_TENANT, tenant);
  }
  #[inline]
  pub fn add_operation_id(&mut self, operation_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DeleteRequest::VT_OPERATION_ID, operation_id);
  }
  #[inline]
  pub fn add_origin_peer(&mut self, origin_peer: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DeleteRequest::VT_ORIGIN_PEER, origin_peer);
  }
  #[inline]
  pub fn add_force(&mut self, force: bool) {
    self.fbb_.push_slot::<bool>(DeleteRequest::VT_FORCE, force, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DeleteRequestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DeleteRequestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DeleteRequest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DeleteRequest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DeleteRequest");
      ds.field("manifest_id", &self.manifest_id());
      ds.field("tenant", &self.tenant());
      ds.field("operation_id", &self.operation_id());
      ds.field("origin_peer", &self.origin_peer());
      ds.field("force", &self.force());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `DeleteRequest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_delete_request_unchecked`.
pub fn root_as_delete_request(buf: &[u8]) -> Result<DeleteRequest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<DeleteRequest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `DeleteRequest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_delete_request_unchecked`.
pub fn size_prefixed_root_as_delete_request(buf: &[u8]) -> Result<DeleteRequest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<DeleteRequest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `DeleteRequest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_delete_request_unchecked`.
pub fn root_as_delete_request_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DeleteRequest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<DeleteRequest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `DeleteRequest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_delete_request_unchecked`.
pub fn size_prefixed_root_as_delete_request_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DeleteRequest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<DeleteRequest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a DeleteRequest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `DeleteRequest`.
pub unsafe fn root_as_delete_request_unchecked(buf: &[u8]) -> DeleteRequest {
  unsafe { flatbuffers::root_unchecked::<DeleteRequest>(buf) }
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed DeleteRequest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `DeleteRequest`.
pub unsafe fn size_prefixed_root_as_delete_request_unchecked(buf: &[u8]) -> DeleteRequest {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<DeleteRequest>(buf) }
}
#[inline]
pub fn finish_delete_request_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<DeleteRequest<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_delete_request_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<DeleteRequest<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod machine
}  // pub mod beemesh


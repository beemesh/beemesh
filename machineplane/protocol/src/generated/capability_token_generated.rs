// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod beemesh {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod machine {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum CapabilityOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Capability<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Capability<'a> {
  type Inner = Capability<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> Capability<'a> {
  pub const VT_TYPE_: flatbuffers::VOffsetT = 4;
  pub const VT_TASK_ID: flatbuffers::VOffsetT = 6;
  pub const VT_REQUIRED_QUORUM: flatbuffers::VOffsetT = 8;
  pub const VT_ISSUED_AT: flatbuffers::VOffsetT = 10;
  pub const VT_EXPIRES_AT: flatbuffers::VOffsetT = 12;
  pub const VT_ISSUER_PEER_ID: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Capability { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CapabilityArgs<'args>
  ) -> flatbuffers::WIPOffset<Capability<'bldr>> {
    let mut builder = CapabilityBuilder::new(_fbb);
    builder.add_expires_at(args.expires_at);
    builder.add_issued_at(args.issued_at);
    if let Some(x) = args.issuer_peer_id { builder.add_issuer_peer_id(x); }
    if let Some(x) = args.task_id { builder.add_task_id(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    builder.add_required_quorum(args.required_quorum);
    builder.finish()
  }


  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Capability::VT_TYPE_, None)}
  }
  #[inline]
  pub fn task_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Capability::VT_TASK_ID, None)}
  }
  #[inline]
  pub fn required_quorum(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(Capability::VT_REQUIRED_QUORUM, Some(0)).unwrap()}
  }
  #[inline]
  pub fn issued_at(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Capability::VT_ISSUED_AT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn expires_at(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Capability::VT_EXPIRES_AT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn issuer_peer_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Capability::VT_ISSUER_PEER_ID, None)}
  }
}

impl flatbuffers::Verifiable for Capability<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("task_id", Self::VT_TASK_ID, false)?
     .visit_field::<u8>("required_quorum", Self::VT_REQUIRED_QUORUM, false)?
     .visit_field::<u64>("issued_at", Self::VT_ISSUED_AT, false)?
     .visit_field::<u64>("expires_at", Self::VT_EXPIRES_AT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("issuer_peer_id", Self::VT_ISSUER_PEER_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct CapabilityArgs<'a> {
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub task_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub required_quorum: u8,
    pub issued_at: u64,
    pub expires_at: u64,
    pub issuer_peer_id: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for CapabilityArgs<'a> {
  #[inline]
  fn default() -> Self {
    CapabilityArgs {
      type_: None,
      task_id: None,
      required_quorum: 0,
      issued_at: 0,
      expires_at: 0,
      issuer_peer_id: None,
    }
  }
}

pub struct CapabilityBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CapabilityBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Capability::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_task_id(&mut self, task_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Capability::VT_TASK_ID, task_id);
  }
  #[inline]
  pub fn add_required_quorum(&mut self, required_quorum: u8) {
    self.fbb_.push_slot::<u8>(Capability::VT_REQUIRED_QUORUM, required_quorum, 0);
  }
  #[inline]
  pub fn add_issued_at(&mut self, issued_at: u64) {
    self.fbb_.push_slot::<u64>(Capability::VT_ISSUED_AT, issued_at, 0);
  }
  #[inline]
  pub fn add_expires_at(&mut self, expires_at: u64) {
    self.fbb_.push_slot::<u64>(Capability::VT_EXPIRES_AT, expires_at, 0);
  }
  #[inline]
  pub fn add_issuer_peer_id(&mut self, issuer_peer_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Capability::VT_ISSUER_PEER_ID, issuer_peer_id);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CapabilityBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CapabilityBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Capability<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Capability<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Capability");
      ds.field("type_", &self.type_());
      ds.field("task_id", &self.task_id());
      ds.field("required_quorum", &self.required_quorum());
      ds.field("issued_at", &self.issued_at());
      ds.field("expires_at", &self.expires_at());
      ds.field("issuer_peer_id", &self.issuer_peer_id());
      ds.finish()
  }
}
pub enum CaveatOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Caveat<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Caveat<'a> {
  type Inner = Caveat<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> Caveat<'a> {
  pub const VT_CONDITION_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_VALUE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Caveat { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CaveatArgs<'args>
  ) -> flatbuffers::WIPOffset<Caveat<'bldr>> {
    let mut builder = CaveatBuilder::new(_fbb);
    if let Some(x) = args.value { builder.add_value(x); }
    if let Some(x) = args.condition_type { builder.add_condition_type(x); }
    builder.finish()
  }


  #[inline]
  pub fn condition_type(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Caveat::VT_CONDITION_TYPE, None)}
  }
  #[inline]
  pub fn value(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Caveat::VT_VALUE, None)}
  }
}

impl flatbuffers::Verifiable for Caveat<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("condition_type", Self::VT_CONDITION_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("value", Self::VT_VALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct CaveatArgs<'a> {
    pub condition_type: Option<flatbuffers::WIPOffset<&'a str>>,
    pub value: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for CaveatArgs<'a> {
  #[inline]
  fn default() -> Self {
    CaveatArgs {
      condition_type: None,
      value: None,
    }
  }
}

pub struct CaveatBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CaveatBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_condition_type(&mut self, condition_type: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Caveat::VT_CONDITION_TYPE, condition_type);
  }
  #[inline]
  pub fn add_value(&mut self, value: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Caveat::VT_VALUE, value);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CaveatBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CaveatBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Caveat<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Caveat<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Caveat");
      ds.field("condition_type", &self.condition_type());
      ds.field("value", &self.value());
      ds.finish()
  }
}
pub enum SignatureEntryOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SignatureEntry<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SignatureEntry<'a> {
  type Inner = SignatureEntry<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> SignatureEntry<'a> {
  pub const VT_SIGNER_PEER_ID: flatbuffers::VOffsetT = 4;
  pub const VT_PUBLIC_KEY: flatbuffers::VOffsetT = 6;
  pub const VT_SIGNATURE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SignatureEntry { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SignatureEntryArgs<'args>
  ) -> flatbuffers::WIPOffset<SignatureEntry<'bldr>> {
    let mut builder = SignatureEntryBuilder::new(_fbb);
    if let Some(x) = args.signature { builder.add_signature(x); }
    if let Some(x) = args.public_key { builder.add_public_key(x); }
    if let Some(x) = args.signer_peer_id { builder.add_signer_peer_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn signer_peer_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SignatureEntry::VT_SIGNER_PEER_ID, None)}
  }
  #[inline]
  pub fn public_key(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(SignatureEntry::VT_PUBLIC_KEY, None)}
  }
  #[inline]
  pub fn signature(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(SignatureEntry::VT_SIGNATURE, None)}
  }
}

impl flatbuffers::Verifiable for SignatureEntry<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("signer_peer_id", Self::VT_SIGNER_PEER_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("public_key", Self::VT_PUBLIC_KEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("signature", Self::VT_SIGNATURE, false)?
     .finish();
    Ok(())
  }
}
pub struct SignatureEntryArgs<'a> {
    pub signer_peer_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub public_key: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub signature: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for SignatureEntryArgs<'a> {
  #[inline]
  fn default() -> Self {
    SignatureEntryArgs {
      signer_peer_id: None,
      public_key: None,
      signature: None,
    }
  }
}

pub struct SignatureEntryBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SignatureEntryBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_signer_peer_id(&mut self, signer_peer_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SignatureEntry::VT_SIGNER_PEER_ID, signer_peer_id);
  }
  #[inline]
  pub fn add_public_key(&mut self, public_key: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SignatureEntry::VT_PUBLIC_KEY, public_key);
  }
  #[inline]
  pub fn add_signature(&mut self, signature: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SignatureEntry::VT_SIGNATURE, signature);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SignatureEntryBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SignatureEntryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SignatureEntry<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SignatureEntry<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SignatureEntry");
      ds.field("signer_peer_id", &self.signer_peer_id());
      ds.field("public_key", &self.public_key());
      ds.field("signature", &self.signature());
      ds.finish()
  }
}
pub enum CapabilityTokenOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CapabilityToken<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CapabilityToken<'a> {
  type Inner = CapabilityToken<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> CapabilityToken<'a> {
  pub const VT_ROOT_CAPABILITY: flatbuffers::VOffsetT = 4;
  pub const VT_CAVEATS: flatbuffers::VOffsetT = 6;
  pub const VT_SIGNATURE_CHAIN: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CapabilityToken { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CapabilityTokenArgs<'args>
  ) -> flatbuffers::WIPOffset<CapabilityToken<'bldr>> {
    let mut builder = CapabilityTokenBuilder::new(_fbb);
    if let Some(x) = args.signature_chain { builder.add_signature_chain(x); }
    if let Some(x) = args.caveats { builder.add_caveats(x); }
    if let Some(x) = args.root_capability { builder.add_root_capability(x); }
    builder.finish()
  }


  #[inline]
  pub fn root_capability(&self) -> Option<Capability<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Capability>>(CapabilityToken::VT_ROOT_CAPABILITY, None)}
  }
  #[inline]
  pub fn caveats(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Caveat<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Caveat>>>>(CapabilityToken::VT_CAVEATS, None)}
  }
  #[inline]
  pub fn signature_chain(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<SignatureEntry<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<SignatureEntry>>>>(CapabilityToken::VT_SIGNATURE_CHAIN, None)}
  }
}

impl flatbuffers::Verifiable for CapabilityToken<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<Capability>>("root_capability", Self::VT_ROOT_CAPABILITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Caveat>>>>("caveats", Self::VT_CAVEATS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<SignatureEntry>>>>("signature_chain", Self::VT_SIGNATURE_CHAIN, false)?
     .finish();
    Ok(())
  }
}
pub struct CapabilityTokenArgs<'a> {
    pub root_capability: Option<flatbuffers::WIPOffset<Capability<'a>>>,
    pub caveats: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Caveat<'a>>>>>,
    pub signature_chain: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<SignatureEntry<'a>>>>>,
}
impl<'a> Default for CapabilityTokenArgs<'a> {
  #[inline]
  fn default() -> Self {
    CapabilityTokenArgs {
      root_capability: None,
      caveats: None,
      signature_chain: None,
    }
  }
}

pub struct CapabilityTokenBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CapabilityTokenBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_root_capability(&mut self, root_capability: flatbuffers::WIPOffset<Capability<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Capability>>(CapabilityToken::VT_ROOT_CAPABILITY, root_capability);
  }
  #[inline]
  pub fn add_caveats(&mut self, caveats: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Caveat<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CapabilityToken::VT_CAVEATS, caveats);
  }
  #[inline]
  pub fn add_signature_chain(&mut self, signature_chain: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<SignatureEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CapabilityToken::VT_SIGNATURE_CHAIN, signature_chain);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CapabilityTokenBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CapabilityTokenBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CapabilityToken<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CapabilityToken<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CapabilityToken");
      ds.field("root_capability", &self.root_capability());
      ds.field("caveats", &self.caveats());
      ds.field("signature_chain", &self.signature_chain());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `CapabilityToken`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_capability_token_unchecked`.
pub fn root_as_capability_token(buf: &[u8]) -> Result<CapabilityToken, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<CapabilityToken>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `CapabilityToken` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_capability_token_unchecked`.
pub fn size_prefixed_root_as_capability_token(buf: &[u8]) -> Result<CapabilityToken, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<CapabilityToken>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `CapabilityToken` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_capability_token_unchecked`.
pub fn root_as_capability_token_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<CapabilityToken<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<CapabilityToken<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `CapabilityToken` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_capability_token_unchecked`.
pub fn size_prefixed_root_as_capability_token_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<CapabilityToken<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<CapabilityToken<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a CapabilityToken and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `CapabilityToken`.
pub unsafe fn root_as_capability_token_unchecked(buf: &[u8]) -> CapabilityToken {
  unsafe { flatbuffers::root_unchecked::<CapabilityToken>(buf) }
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed CapabilityToken and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `CapabilityToken`.
pub unsafe fn size_prefixed_root_as_capability_token_unchecked(buf: &[u8]) -> CapabilityToken {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<CapabilityToken>(buf) }
}
#[inline]
pub fn finish_capability_token_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<CapabilityToken<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_capability_token_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<CapabilityToken<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod machine
}  // pub mod beemesh


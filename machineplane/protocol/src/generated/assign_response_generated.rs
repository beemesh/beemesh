// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod beemesh {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod machine {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum AssignResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AssignResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AssignResponse<'a> {
  type Inner = AssignResponse<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> AssignResponse<'a> {
  pub const VT_OK: flatbuffers::VOffsetT = 4;
  pub const VT_TASK_ID: flatbuffers::VOffsetT = 6;
  pub const VT_ASSIGNED_PEERS: flatbuffers::VOffsetT = 8;
  pub const VT_PER_PEER_RESULTS_JSON: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AssignResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AssignResponseArgs<'args>
  ) -> flatbuffers::WIPOffset<AssignResponse<'bldr>> {
    let mut builder = AssignResponseBuilder::new(_fbb);
    if let Some(x) = args.per_peer_results_json { builder.add_per_peer_results_json(x); }
    if let Some(x) = args.assigned_peers { builder.add_assigned_peers(x); }
    if let Some(x) = args.task_id { builder.add_task_id(x); }
    builder.add_ok(args.ok);
    builder.finish()
  }


  #[inline]
  pub fn ok(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(AssignResponse::VT_OK, Some(false)).unwrap()}
  }
  #[inline]
  pub fn task_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AssignResponse::VT_TASK_ID, None)}
  }
  #[inline]
  pub fn assigned_peers(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AssignResponse::VT_ASSIGNED_PEERS, None)}
  }
  #[inline]
  pub fn per_peer_results_json(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AssignResponse::VT_PER_PEER_RESULTS_JSON, None)}
  }
}

impl flatbuffers::Verifiable for AssignResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("ok", Self::VT_OK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("task_id", Self::VT_TASK_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("assigned_peers", Self::VT_ASSIGNED_PEERS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("per_peer_results_json", Self::VT_PER_PEER_RESULTS_JSON, false)?
     .finish();
    Ok(())
  }
}
pub struct AssignResponseArgs<'a> {
    pub ok: bool,
    pub task_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub assigned_peers: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub per_peer_results_json: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for AssignResponseArgs<'a> {
  #[inline]
  fn default() -> Self {
    AssignResponseArgs {
      ok: false,
      task_id: None,
      assigned_peers: None,
      per_peer_results_json: None,
    }
  }
}

pub struct AssignResponseBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AssignResponseBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ok(&mut self, ok: bool) {
    self.fbb_.push_slot::<bool>(AssignResponse::VT_OK, ok, false);
  }
  #[inline]
  pub fn add_task_id(&mut self, task_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AssignResponse::VT_TASK_ID, task_id);
  }
  #[inline]
  pub fn add_assigned_peers(&mut self, assigned_peers: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AssignResponse::VT_ASSIGNED_PEERS, assigned_peers);
  }
  #[inline]
  pub fn add_per_peer_results_json(&mut self, per_peer_results_json: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AssignResponse::VT_PER_PEER_RESULTS_JSON, per_peer_results_json);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AssignResponseBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AssignResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AssignResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AssignResponse<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AssignResponse");
      ds.field("ok", &self.ok());
      ds.field("task_id", &self.task_id());
      ds.field("assigned_peers", &self.assigned_peers());
      ds.field("per_peer_results_json", &self.per_peer_results_json());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AssignResponse`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_assign_response_unchecked`.
pub fn root_as_assign_response(buf: &[u8]) -> Result<AssignResponse, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AssignResponse>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AssignResponse` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_assign_response_unchecked`.
pub fn size_prefixed_root_as_assign_response(buf: &[u8]) -> Result<AssignResponse, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AssignResponse>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AssignResponse` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_assign_response_unchecked`.
pub fn root_as_assign_response_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AssignResponse<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AssignResponse<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AssignResponse` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_assign_response_unchecked`.
pub fn size_prefixed_root_as_assign_response_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AssignResponse<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AssignResponse<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AssignResponse and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AssignResponse`.
pub unsafe fn root_as_assign_response_unchecked(buf: &[u8]) -> AssignResponse {
  unsafe { flatbuffers::root_unchecked::<AssignResponse>(buf) }
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AssignResponse and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AssignResponse`.
pub unsafe fn size_prefixed_root_as_assign_response_unchecked(buf: &[u8]) -> AssignResponse {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<AssignResponse>(buf) }
}
#[inline]
pub fn finish_assign_response_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<AssignResponse<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_assign_response_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<AssignResponse<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod machine
}  // pub mod beemesh


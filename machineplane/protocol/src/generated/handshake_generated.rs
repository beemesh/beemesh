// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod beemesh {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod machine {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum HandshakeOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Handshake<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Handshake<'a> {
  type Inner = Handshake<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Handshake<'a> {
  pub const VT_NONCE: flatbuffers::VOffsetT = 4;
  pub const VT_SIGNATURE: flatbuffers::VOffsetT = 6;
  pub const VT_PROTOCOL_VERSION: flatbuffers::VOffsetT = 8;
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Handshake { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args HandshakeArgs<'args>
  ) -> flatbuffers::WIPOffset<Handshake<'bldr>> {
    let mut builder = HandshakeBuilder::new(_fbb);
    builder.add_timestamp(args.timestamp);
    if let Some(x) = args.protocol_version { builder.add_protocol_version(x); }
    if let Some(x) = args.signature { builder.add_signature(x); }
    builder.add_nonce(args.nonce);
    builder.finish()
  }


  #[inline]
  pub fn nonce(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(Handshake::VT_NONCE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn signature(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Handshake::VT_SIGNATURE, None)}
  }
  #[inline]
  pub fn protocol_version(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Handshake::VT_PROTOCOL_VERSION, None)}
  }
  #[inline]
  pub fn timestamp(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Handshake::VT_TIMESTAMP, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Handshake<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("nonce", Self::VT_NONCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("signature", Self::VT_SIGNATURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("protocol_version", Self::VT_PROTOCOL_VERSION, false)?
     .visit_field::<u64>("timestamp", Self::VT_TIMESTAMP, false)?
     .finish();
    Ok(())
  }
}
pub struct HandshakeArgs<'a> {
    pub nonce: u32,
    pub signature: Option<flatbuffers::WIPOffset<&'a str>>,
    pub protocol_version: Option<flatbuffers::WIPOffset<&'a str>>,
    pub timestamp: u64,
}
impl<'a> Default for HandshakeArgs<'a> {
  #[inline]
  fn default() -> Self {
    HandshakeArgs {
      nonce: 0,
      signature: None,
      protocol_version: None,
      timestamp: 0,
    }
  }
}

pub struct HandshakeBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> HandshakeBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_nonce(&mut self, nonce: u32) {
    self.fbb_.push_slot::<u32>(Handshake::VT_NONCE, nonce, 0);
  }
  #[inline]
  pub fn add_signature(&mut self, signature: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Handshake::VT_SIGNATURE, signature);
  }
  #[inline]
  pub fn add_protocol_version(&mut self, protocol_version: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Handshake::VT_PROTOCOL_VERSION, protocol_version);
  }
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: u64) {
    self.fbb_.push_slot::<u64>(Handshake::VT_TIMESTAMP, timestamp, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> HandshakeBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    HandshakeBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Handshake<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Handshake<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Handshake");
      ds.field("nonce", &self.nonce());
      ds.field("signature", &self.signature());
      ds.field("protocol_version", &self.protocol_version());
      ds.field("timestamp", &self.timestamp());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Handshake`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_handshake_unchecked`.
pub fn root_as_handshake(buf: &[u8]) -> Result<Handshake, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Handshake>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Handshake` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_handshake_unchecked`.
pub fn size_prefixed_root_as_handshake(buf: &[u8]) -> Result<Handshake, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Handshake>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Handshake` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_handshake_unchecked`.
pub fn root_as_handshake_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Handshake<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Handshake<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Handshake` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_handshake_unchecked`.
pub fn size_prefixed_root_as_handshake_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Handshake<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Handshake<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Handshake and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Handshake`.
pub unsafe fn root_as_handshake_unchecked(buf: &[u8]) -> Handshake {
  flatbuffers::root_unchecked::<Handshake>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Handshake and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Handshake`.
pub unsafe fn size_prefixed_root_as_handshake_unchecked(buf: &[u8]) -> Handshake {
  flatbuffers::size_prefixed_root_unchecked::<Handshake>(buf)
}
#[inline]
pub fn finish_handshake_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Handshake<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_handshake_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Handshake<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod machine
}  // pub mod beemesh


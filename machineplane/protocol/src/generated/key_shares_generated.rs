// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod beemesh {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod machine {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum KeySharesOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct KeyShares<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for KeyShares<'a> {
  type Inner = KeyShares<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> KeyShares<'a> {
  pub const VT_SHARES: flatbuffers::VOffsetT = 4;
  pub const VT_N: flatbuffers::VOffsetT = 6;
  pub const VT_K: flatbuffers::VOffsetT = 8;
  pub const VT_COUNT: flatbuffers::VOffsetT = 10;
  pub const VT_MANIFEST_ID: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    KeyShares { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args KeySharesArgs<'args>
  ) -> flatbuffers::WIPOffset<KeyShares<'bldr>> {
    let mut builder = KeySharesBuilder::new(_fbb);
    if let Some(x) = args.manifest_id { builder.add_manifest_id(x); }
    builder.add_count(args.count);
    builder.add_k(args.k);
    builder.add_n(args.n);
    if let Some(x) = args.shares { builder.add_shares(x); }
    builder.finish()
  }


  #[inline]
  pub fn shares(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(KeyShares::VT_SHARES, None)}
  }
  #[inline]
  pub fn n(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(KeyShares::VT_N, Some(0)).unwrap()}
  }
  #[inline]
  pub fn k(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(KeyShares::VT_K, Some(0)).unwrap()}
  }
  #[inline]
  pub fn count(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(KeyShares::VT_COUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn manifest_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(KeyShares::VT_MANIFEST_ID, None)}
  }
}

impl flatbuffers::Verifiable for KeyShares<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("shares", Self::VT_SHARES, false)?
     .visit_field::<u32>("n", Self::VT_N, false)?
     .visit_field::<u32>("k", Self::VT_K, false)?
     .visit_field::<u32>("count", Self::VT_COUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("manifest_id", Self::VT_MANIFEST_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct KeySharesArgs<'a> {
    pub shares: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub n: u32,
    pub k: u32,
    pub count: u32,
    pub manifest_id: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for KeySharesArgs<'a> {
  #[inline]
  fn default() -> Self {
    KeySharesArgs {
      shares: None,
      n: 0,
      k: 0,
      count: 0,
      manifest_id: None,
    }
  }
}

pub struct KeySharesBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> KeySharesBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_shares(&mut self, shares: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(KeyShares::VT_SHARES, shares);
  }
  #[inline]
  pub fn add_n(&mut self, n: u32) {
    self.fbb_.push_slot::<u32>(KeyShares::VT_N, n, 0);
  }
  #[inline]
  pub fn add_k(&mut self, k: u32) {
    self.fbb_.push_slot::<u32>(KeyShares::VT_K, k, 0);
  }
  #[inline]
  pub fn add_count(&mut self, count: u32) {
    self.fbb_.push_slot::<u32>(KeyShares::VT_COUNT, count, 0);
  }
  #[inline]
  pub fn add_manifest_id(&mut self, manifest_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(KeyShares::VT_MANIFEST_ID, manifest_id);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> KeySharesBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    KeySharesBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<KeyShares<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for KeyShares<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("KeyShares");
      ds.field("shares", &self.shares());
      ds.field("n", &self.n());
      ds.field("k", &self.k());
      ds.field("count", &self.count());
      ds.field("manifest_id", &self.manifest_id());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `KeyShares`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_key_shares_unchecked`.
pub fn root_as_key_shares(buf: &[u8]) -> Result<KeyShares, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<KeyShares>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `KeyShares` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_key_shares_unchecked`.
pub fn size_prefixed_root_as_key_shares(buf: &[u8]) -> Result<KeyShares, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<KeyShares>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `KeyShares` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_key_shares_unchecked`.
pub fn root_as_key_shares_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<KeyShares<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<KeyShares<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `KeyShares` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_key_shares_unchecked`.
pub fn size_prefixed_root_as_key_shares_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<KeyShares<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<KeyShares<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a KeyShares and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `KeyShares`.
pub unsafe fn root_as_key_shares_unchecked(buf: &[u8]) -> KeyShares {
  flatbuffers::root_unchecked::<KeyShares>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed KeyShares and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `KeyShares`.
pub unsafe fn size_prefixed_root_as_key_shares_unchecked(buf: &[u8]) -> KeyShares {
  flatbuffers::size_prefixed_root_unchecked::<KeyShares>(buf)
}
#[inline]
pub fn finish_key_shares_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<KeyShares<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_key_shares_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<KeyShares<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod machine
}  // pub mod beemesh

